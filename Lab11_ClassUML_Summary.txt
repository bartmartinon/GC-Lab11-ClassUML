Polymorphism is an OOP concept where an object has the ability to take on many forms. It is a feature of inheritance that allows us to treat objects of different subclasses that are dervied from the same superclass as if they had that superclass type. In short, you treat subclass objects as superclass objects. A Square can be treated as a Rectangle, which in turn can be treated as a Shape, for instance.

Regarding this lab, I made it work by having a setup where GameCharacter is a superclass to MagicUsingCharacter and Warrior. By overriding the constructors and Play() method on top of using their superclass base counterparts within the subclasses, calling upon those objects will have the program treat them as GameCharacters. Being in a List of GameCharacter instances, running Play() on each individual object will have their variants of Play() be executed, which includes both the base GameCharacter information (Name, Strength, Intelligence), while also display each object specific information from their overriden versions. Warrior instances show their WeaponType while Wizards (as a subclass to MagicUsingCharacter, can use that fact to be able to indirectly pass themselves as a GameCharacter since single inheritance would prevent Wizard from being a child to GameCharacter) show off their MagicalEnergy value (again, given to them by MagicUsingCharacter) and their specific SpellNumber value.